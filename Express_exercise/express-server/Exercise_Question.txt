Problem Statement

Objective: Create an Express server to manage and serve task data. The task data will be stored locally in an array. 
           The server should provide APIs to list all tasks, retrieve a task based on its ID, and filter tasks based on their status.

Requirements:

1. Express Server Setup:
      * Set up an Express server to handle incoming HTTP requests.
2. Task Data Storage:
      * Store the task data in a local array. Each task object in the array should have the following properties:

■id (string or number): Unique identifier for the task.
■title (string): The title of the task.
■description (string): A brief description of the task.
■status (string): The status of the task (e.g., "pending", "in-progress", "completed").

* Sample Tasks:
const tasks = [
    { id: 1, title: "Setup Project", description: "Initialize the project structure", status: "completed" }, 
    { id: 2, title: "Install Dependencies", description: "Install necessary npm packages", status: "completed" },
    { id: 3, title: "Setup Express Server", description: "Create and configure Express server", status: "in-progress" }, 
    { id: 4, title: "Create Task Model", description: "Define the task data structure", status: "in-progress" },
    { id: 5, title: "Implement Task API", description: "Develop the API endpoints for tasks", status: "pending" },
    { id: 6, title: "Write Unit Tests", description: "Create unit tests for the API", status: "pending" },
    { id: 7, title: "Setup Error Handling", description: "Implement error handling in the server", status: "pending" },
    { id: 8, title: "Document API", description: "Write documentation for the API endpoints", status: "pending" },
    { id: 9, title: "Setup Linter", description: "Configure ESLint for code quality", status: "completed" },
    { id: 10, title: "Deploy Server", description: "Deploy the server to a cloud provider", status: "pending" } 
]

3. API Endpoints:
      * GET /tasks: Retrieve a list of all tasks.
      * GET/tasks/:id: Retrieve a task based on its unique ID.
      * GET /tasks/status/:status: Retrieve tasks that match a specific status.
4. Error Handling:
      * Implement appropriate error handling for cases such as requesting a non-existent task ID or an invalid status.
5. Testing:
      * Ensure the server and API endplints are tested to confirm they return the expected data.
Assumptions:
      * The tasks are stored in memory, and no database is required.
      * The status property will have predefined values (e.g., "pending", "in-progress", "completed").
      * The server will run locally.
Deliverables:
      * The code for the Express server and API endpoints.
      * Instructions for running the server locally


# Note :
mkdir express-server -> to create express-server file
cd express-servers   -> to access express-server file
npm init             -> to initialize
npm install express  -> to install express packages



OUTPUT:
1. https://github.com/sreevarshan0811/DCT_Academy/wiki/Express_server_output










